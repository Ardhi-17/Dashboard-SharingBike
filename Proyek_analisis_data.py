# -*- coding: utf-8 -*-
"""Copy of Proyek Analisis Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AG0P4_aiypVeOm1sG47tnpr4QTGak-Nt

# Proyek Analisis Data: [Bike-sharing-dataset]
- **Nama:** [Ahcmad Ardhi Arridho]
- **Email:** [Ardhigt117@gmail.com]
- **ID Dicoding:** [ardhi_arridho]

## Menentukan Pertanyaan Bisnis

- Bagaimana perbandingan penyewaan sepeda di semua musim dalam tahun 2011 dan 2012?
- Musim apa yang menjadi musim dengan tingkat penyewa sepeda terbanyak?

## Import Semua Packages/Library yang Digunakan
"""

# Mengimport seluruh library yang dibutuhkan
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm

"""## Data Wrangling

### Gathering Data
"""

# Mengimport dataset yang dibutuhkan
day_url = "https://raw.githubusercontent.com/Ardhi-17/air-quaility-dataset/main/Bike-sharing-dataset/day.csv"

day_df = pd.read_csv(day_url)

day_df.head()

# Mengimport dataset yang dibutuhkan
hour_url = "https://raw.githubusercontent.com/Ardhi-17/air-quaility-dataset/main/Bike-sharing-dataset/hour.csv"

hour_df = pd.read_csv(hour_url)

hour_df.head()

"""### Assessing Data"""

# Memeriksa tipe data dari kedua dataset
hour_df.info()
day_df.info()

# Mengecek keberadaan missing value di dataset hour_df
hour_df.isna().sum()

# Mengecek keberadaan missing value di dataset day_df
day_df.isna().sum()

# Memeriksa duplikasi
print("Jumlah duplikasi: ", hour_df.duplicated().sum())
print("Jumlah duplikasi: ", day_df.duplicated().sum())

# Memeriksa parameter statistik dari kolom numerik yang terdapat didalam day_df
day_df.describe()

# memeriksa parameter statistik dari kolom numerik yang terdapat di dalam day_df
hour_df.describe()

"""### Cleaning Data"""

# Menghapus kolom yang tidak diperlukan.
# Kolom instant dan kolom workingday akan di hapus
hour_df.drop(['workingday'], axis = 1, inplace= True)
day_df.drop(['workingday'], axis = 1, inplace= True)
hour_df.drop(['instant'], axis = 1, inplace= True)
day_df.drop(['instant'], axis = 1, inplace= True)

# Mengganti tipe data dteday yang tadinya 'object' akan kita ubah menjadi 'datetime'
day_df['dteday'] = pd.to_datetime(day_df['dteday'])
hour_df['dteday'] = pd.to_datetime(hour_df['dteday'])

# Mengganti nama dari kolom agar lebih mudah dipahami
hour_df.rename(columns={'dteday':'date',
                        'yr':'year',
                        'mnth':'month',
                        'hr':'hour',
                        'holiday':'is_holiday',
                        'workingday':'is_working_day',
                        'weathersit':'weather_situation',
                        'temp':'temperature',
                        'atemp':'feels_like_temperature',
                        'hum':'humidity',
                        'casual':'casual',
                        'registered':'registered',
                        'cnt':'total_users'}, inplace=True)

day_df.rename(columns={'dteday':'date',
                        'yr':'year',
                        'mnth':'month',
                        'hr':'hour',
                        'holiday':'is_holiday',
                        'workingday':'is_working_day',
                        'weathersit':'weather_situation',
                        'temp':'temperature',
                        'atemp':'feels_like_temperature',
                        'hum':'humidity',
                        'casual':'casual',
                        'registered':'registered',
                        'cnt':'total_users'}, inplace=True)


# Check label
print(hour_df.info())
print(day_df.info())

# Mengkonversi isi kolom agar mudah dipahami
# konversi season menjadi: 1:Spring, 2:Summer, 3:Fall, 4:Winter
day_df.season.replace((1,2,3,4), ('Spring','Summer','Fall','Winter'), inplace=True)
hour_df.season.replace((1,2,3,4), ('Spring','Summer','Fall','Winter'), inplace=True)

# konversi month menjadi: 1:Jan, 2:Feb, 3:Mar, 4:Apr, 5:May, 6:Jun, 7:Jul, 8:Aug, 9:Sep, 10:Oct, 11:Nov, 12:Dec
day_df.month.replace((1,2,3,4,5,6,7,8,9,10,11,12),('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'), inplace=True)
hour_df.month.replace((1,2,3,4,5,6,7,8,9,10,11,12),('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'), inplace=True)

# konversi weather_situation menjadi: 1:Clear, 2:Misty, 3:Light_RainSnow 4:Heavy_RainSnow
day_df.weather_situation.replace((1,2,3,4), ('Good','Moderate','Bad','Worst'), inplace=True)
hour_df.weather_situation.replace((1,2,3,4), ('Good','Moderate','Bad','Worst'), inplace=True)

# konversi one_of_week menjadi: 0:Sun, 1:Mon, 2:Tue, 3:Wed, 4:Thu, 5:Fri, 6:Sat
day_df.weekday.replace((0,1,2,3,4,5,6), ('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'), inplace=True)
hour_df.weekday.replace((0,1,2,3,4,5,6), ('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'), inplace=True)

# konversi year menjadi: 0:2011, 1:2012
day_df.year.replace((0,1), ('2011','2012'), inplace=True)
hour_df.year.replace((0,1), ('2011','2012'), inplace=True)

# Menghitung Kelembapan
day_df['humidity'] = day_df['humidity']*100
hour_df['humidity'] = hour_df['humidity']*100

# Memperbaiki satuan waktu
hour_df.hour.replace((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23),('12 am','01 am', '02 am', '03 am', '04 am', '05 am', '06 am', '07 am','08 am', '09 am', '10 am', '11 am', '12 pm', '01 pm', '02 pm','03 pm', '04 pm', '05 pm', '06 pm', '07 pm', '08 pm', '09 pm', '10 pm', '11 pm'), inplace=True)

# Check data
print(hour_df.head())
print(day_df.head())

# Membuat kolom baru bernama category_days yang menunjukan isi kolom tersebut weekend atau weekdays
weekday = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
def get_category_days(weekday):
    if weekday in ["Saturday", "Sunday"]:
        return "weekend"
    else:
        return "weekdays"

hour_df["category_days"] = hour_df["weekday"].apply(get_category_days)
day_df["category_days"] = day_df["weekday"].apply(get_category_days)

# Mengganti tipe data menjadi kategori
hour_df['season'] = hour_df['season'].astype('category')
hour_df['year'] = hour_df['year'].astype('category')
hour_df['month'] = hour_df['month'].astype('category')
hour_df['hour'] = hour_df['hour'].astype('category')
hour_df['is_holiday'] = hour_df['is_holiday'].astype('category')
hour_df['weekday'] = hour_df['weekday'].astype('category')
hour_df['weather_situation'] = hour_df['weather_situation'].astype('category')

# Check label
day_df.info()

"""## Exploratory Data Analysis (EDA)

### Explore ...
"""

# melihat rangkuman parameter statistik dari data hour_df
hour_df.describe(include="all")

# melihat rangkuman parameter statistik dari data hour_df
day_df.describe(include="all")

# penyewaan berdasarkan jam
total_user_by_hour_df = hour_df.groupby(by=["hour"], observed=True).agg({
    "casual": "sum",
    "registered": "sum",
    "total_users": "sum"
}).sort_values(by='hour', ascending=False)
total_user_by_hour_df.head(25)

# Penyewaan berdasarkan season
hour_df.groupby(by="season", observed=True).agg({
    "total_users": ["max", "min", "mean", "sum", "std"],
    "casual": ["max", "min", "mean", "sum", "std"],
    "registered": ["max", "min", "mean", "sum", "std"]
})

hour_df.groupby(by="month", observed=True).agg({
    "total_users": ["max", "min", "mean", "sum", "std"]
})

hour_df.groupby(by="weather_situation", observed=True).agg({
    "total_users": ["max", "min", "mean", "sum", "std"]
})

total_user_by_season_every_year_df = hour_df.groupby(by=["season", "year"], observed=True).agg({
    "casual": "sum",
    "registered": "sum",
    "total_users": "sum"
})
total_user_by_season_every_year_df.head(8)

"""## Visualization & Explanatory Analysis

### Pertanyaan 1:
"""

# Menampilkan penyewaan sepeda untuk setiap tahunnya
season_order = ['Spring', 'Summer', 'Fall', 'Winter']
fig, ax = plt.subplots(figsize=(15, 7))

sns.barplot(data=total_user_by_season_every_year_df, x="season", y="total_users", hue="year", errorbar=None, order=season_order, ax=ax)

for i in ax.containers:
    ax.bar_label(i,fontsize=10)

plt.title("Bikeshare Rides by Season Every Year Bases on Season", size=20)
plt.xlabel("Season", size=15)
plt.ylabel("Total Rides", size=15)
plt.show()

"""Pada tahun 2012, terdapat peningkatan signifikan dalam jumlah penyewaan sepeda jika dibandingkan dengan musim yang sama pada tahun 2011. Musim gugur (Fall) menjadi periode dengan jumlah penyewaan tertinggi pada tahun 2011 dan 2012, mencapai 419.650 dan 641.479 penyewaan, secara berturut-turut. Sebaliknya, musim semi (Spring) menjadi musim dengan jumlah penyewaan terendah pada kedua tahun tersebut, dengan jumlah penyewaan masing-masing sebanyak 150.000 dan 321.348.

### Pertanyaan 2:
"""

# mengatur warna
colors = ["#D3D3D3", "#D3D3D3", "#D3D3D3", "#90CAF9"]

# membuat subplot dengan 1 baris dan 1 kolom, dengan ukuran (20, 10)
fig, ax = plt.subplots(figsize=(20, 10))

# Buat barplot untuk y="total_users" dan x="season", menggunakan data=day_df
sns.barplot(
        y="total_users",
        x="season",
        data=day_df.sort_values(by="season", ascending=False),
        palette=colors,
        ax=ax
    )
# mengatur judul, label y dan x, serta tick params untuk subplot tersebut
ax.set_title("Grafik Antar Musim", loc="center", fontsize=50)
ax.set_ylabel(None)
ax.set_xlabel(None)
ax.tick_params(axis='x', labelsize=15)
ax.tick_params(axis='y', labelsize=)

# menampilkan plot
plt.show()

"""Jumlah penyewaan sepeda tertinggi terjadi pada musim gugur (Fall), dengan total mencapai 1.061.129 penyewaan.

- Kesimpulan pertanyaan 1

Tahun 2012, penyewaan sepedea meningkat dibanding di tahun 2011 dan hal ini terjadi di setiap musim pada tahun tersebut.
---

- Kesimpulan pertanyaan 2

Musim gugur menjadi musim dengan tingkat penyewaan tertinggi.

# TEKNIK CLUSTERING

Total penyewaan yang terdaftar berdasarkan bulan
"""

hour_df.groupby(by="month").registered.nunique().sort_values(ascending=False)

hour_df.groupby(by="weekday").registered.nunique().sort_values(ascending=False)

"""# TIME SERIES ANALYSIS"""

# Dekomposisi time series
period = 24  # Sesuaikan dengan siklus 2 tahun
decomposition = sm.tsa.seasonal_decompose(hour_df['total_users'], model='additive', period=period)
trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

# Visualisasi Trend
plt.figure(figsize=(12, 6))
plt.plot(trend, label='Trend')
plt.title('Trend Analysis')
plt.xlabel('Indeks Waktu')
plt.ylabel('Nilai')
plt.legend()
plt.show()

# Menyimpan DataFrame hour_df ke dalam file CSV
hour_df.to_csv("hour_data.csv", index=False)

# Menyimpan DataFrame day_df ke dalam file CSV
day_df.to_csv("day_data.csv", index=False)